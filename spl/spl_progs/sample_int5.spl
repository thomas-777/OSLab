//open and close

[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+13]=SP;

alias userSP R0;
userSP=SP;

SP=[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+11]*512-1;

alias systemcallno R1;
systemcallno=[[PTBR+2*((userSP-5)/512)]*512 + (userSP-5)%512];
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=systemcallno;



//open
if(systemcallno==2) then
    alias filename R2;
    filename=[[PTBR+2*((userSP-4)/512)]*512 + (userSP-4)%512];
    alias i R3;
    i=0;
    //find resouurce table entry
    while([[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512+RESOURCE_TABLE_OFFSET+i]!=-1 && i<8) do
        i=i+2;
    endwhile;

    if(i==8) then
        [[PTBR+2*((userSP-1)/512)]*512 + (userSP-1)%512]=-3;
    else
        //calll open function to allocate open file table and file status table 
        alias openfiletableentry R4;
        multipush(R0,R1,R2,R3);
        R1=3;
        R2=filename;
        call MOD_3;
        R4=R0;
        multipop(R0,R1,R2,R3);
        if(R4==-1) then
            [[PTBR+2*((userSP-1)/512)]*512 + (userSP-1)%512]=R4;
        else
            [[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512+RESOURCE_TABLE_OFFSET+i]=FILE;
            [[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512+RESOURCE_TABLE_OFFSET+i+1]=R4;
            [[PTBR+2*((userSP-1)/512)]*512 + (userSP-1)%512]=(i/2); 
        endif;
    endif;
    
endif;


//close
if(systemcallno==3) then
    alias filedescr R2;
    filedescr=[[PTBR+2*((userSP-4)/512)]*512 + (userSP-4)%512];
    alias resourcetableentry R3;
    R3=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512+RESOURCE_TABLE_OFFSET+filedescr;
    if(filedescr<0 || filedescr>7 || [resourcetableentry]!=FILE) then
        [[PTBR+2*((userSP-1)/512)]*512 + (userSP-1)%512]=-1;
    else
        alias openfiletableentry R4;
        R4=[resourcetableentry+1];
        multipush(R0,R1,R2,R3,R4);
        R1=4;
        R2=R4;
        call MOD_3;
        multipop(R0,R1,R2,R3,R4);

        [resourcetableentry]=-1;
        [resourcetableentry+1]=-1;
        [[PTBR+2*((userSP-1)/512)]*512 + (userSP-1)%512]=0;
    endif;
endif;

//seek
if(systemcallno==6) then
    alias filedesc R2;
    alias offset R3;
    filedesc=[[PTBR+2*((userSP-4)/512)]*512 + (userSP-4)%512];
    offset=[[PTBR+2*((userSP-3)/512)]*512 + (userSP-3)%512];
    alias resourcetableentry R4;
    R4=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512+RESOURCE_TABLE_OFFSET+filedesc;
    alias openfiletableentry R6;
    R6=[resourcetableentry+1];
    if(filedesc<0 || filedesc>7) then
        [[PTBR+2*((userSP-1)/512)]*512 + (userSP-1)%512]=-1;
    else
        alias inodeindex R5;
        //AQUIRE INODE
		R5=[OPEN_FILE_TABLE+ openfiletableentry*4];
        multipush(R0,R1,R2,R3,R4,R5,R6);
        R1=4;
        R3=[SYSTEM_STATUS_TABLE+1];
        R2=inodeindex;
        call MOD_0;
        multipop(R0,R1,R2,R3,R4,R5,R6);
        
        alias lseek R8;
        lseek=[OPEN_FILE_TABLE+openfiletableentry*4+2];
        alias fileSize R7;
        if (inodeindex == INODE_ROOT) then
            fileSize = 480;
        else
            fileSize = [INODE_TABLE + inodeindex * 16 + 2];
        endif;

        //IF WHEN ADDING OFFSET LSEEK BECOMES -VE RETURN
        if(lseek+offset<0) then
            backup;
            R1=5;
            R3=[SYSTEM_STATUS_TABLE+1];
            R2=inodeindex;
            call MOD_0;
            restore;
            [[PTBR+2*((userSP-1)/512)]*512 + (userSP-1)%512]=-2;
        else
            if (offset == 0) then
                //IF OFFSET IS 0 SET TO THE STARTING OF THE FILE
                [OPEN_FILE_TABLE + 4 * openfiletableentry + 2] = 0;
            else
                //ADD THE OFFSET 
                if (lseek + offset > fileSize) then
                    [OPEN_FILE_TABLE + 4 * openfiletableentry + 2] = fileSize;
                else
                    [OPEN_FILE_TABLE + 4 * openfiletableentry + 2] = lseek + offset;
                endif;
            endif;
            //RELEASE INODE
            backup;
            R1=5;
            R3=[SYSTEM_STATUS_TABLE+1];
            R2=inodeindex;
            call MOD_0;
            restore;
            [[PTBR+2*((userSP-1)/512)]*512 + (userSP-1)%512]=0;
        endif;
    endif;
endif;



[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];

ireturn;


