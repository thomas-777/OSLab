//exception handler
breakpoint; 
backup;
alias currentPID R0;
currentPID=[SYSTEM_STATUS_TABLE+1];

[PROCESS_TABLE+currentPID*16+9]=-1;


[PROCESS_TABLE+currentPID*16+13]=SP;

SP=[PROCESS_TABLE+currentPID*16+11];

multipush(EIP);

//not page fault
if((EC!=0) || ( [PROCESS_TABLE+currentPID*16+13]>=PTLR*512-1)) then
    if (EC == 0) then
        print "Stack overflow";
    endif;
    if (EC == 1) then
        print "Illegal instruction";
    endif;
    if (EC == 2) then
        print "Illegal memory access";
    endif;
    if (EC == 3) then
        print "Arithmetic Exception";
    endif;
    R1=3;
    R2=[SYSTEM_STATUS_TABLE+1];
    call MOD_1;

    call MOD_5;
endif;

//code page fault
if(EPN>3 || EPN<8) then
    alias blockNum R2;

    blockNum=[DISK_MAP_TABLE+currentPID*10+EPN];

    multipush(R0,R1,R2);
    multipush(EPN);
    R1=5;
    R2=blockNum;
    R3=currentPID;
    call MOD_2;
    multipop(EPN);
    multipop(R0,R1,R2);

    [PTBR+2*EPN]=R0;
    [PTBR+2*EPN+1]="1100";
    breakpoint;
endif;


//heap page fault
if(EPN<=3) then
    multipush(R0,R1,R2);
    R1=1;
    call MOD_2;
    [PTBR+4]=R0;
    [PTBR+5]="1110";
    multipop(R0,R1,R2);

    multipush(R0,R1,R2);
    R1=1;
    call MOD_2;
    [PTBR+6]=R0;
    [PTBR+7]="1110";
    multipop(R0,R1,R2);

endif;

[PROCESS_TABLE+currentPID*16+9]=0;

restore;
SP=[PROCESS_TABLE+currentPID*16+13];

SP=SP+1;
[[PTBR + 2 * (SP / 512)] * 512 + (SP % 512)] = EIP;
breakpoint;
ireturn;

