//resource manager module

alias functionNum R1;
alias currentPID R3;

//aquire buffer

if(functionNum==1)  then
    alias bufferNumber R2;

    while ([BUFFER_TABLE + bufferNumber * 4 + 2] != -1) do
        [PROCESS_TABLE + currentPID * 16 + 4] = WAIT_BUFFER;
        [PROCESS_TABLE + currentPID * 16 + 5] = bufferNumber;

        multipush(R1, R2, R3);
        call MOD_5;
        multipop(R1, R2, R3);
    endwhile;
    [BUFFER_TABLE + bufferNumber * 4 + 2] = currentPID;
    return;

endif;

//relese buffer

if(functionNum==2) then
    alias bufferNumber R2;
    if ([SYSTEM_STATUS_TABLE+1] != [BUFFER_TABLE + bufferNumber * 4 + 2]) then
        R0 = -1;
    else
        [BUFFER_TABLE + bufferNumber * 4 + 2] = -1;
        alias i R4;
        i = 0;
        while (i < 16) do
            if ([PROCESS_TABLE + i * 16 + 4] == WAIT_BUFFER && [PROCESS_TABLE + i * 16 + 5] == bufferNumber) then
                [PROCESS_TABLE + i * 16 + 4] = READY;
            endif;
            i = i + 1;
        endwhile;

        R0 = 0;
    endif;
    return;
endif;


//acquire inode
if(functionNum==4) then
    alias inodeNumber R2;

    while ([FILE_STATUS_TABLE + inodeNumber * 4 + 0] != -1) do
        [PROCESS_TABLE + currentPID * 16 + 4] = WAIT_FILE;
        [PROCESS_TABLE + currentPID * 16 + 5] = inodeNumber;
        multipush(R1, R2, R3);
        call MOD_5;
        multipop(R1, R2, R3);
    endwhile;
    // file delete check
    if ([INODE_TABLE + inodeNumber * 16 + 1] == -1) then
        R0 = -1;
    else 
        [FILE_STATUS_TABLE + inodeNumber * 4 + 0] = currentPID;
        R0 = 0;
    endif;
    return;
endif;

//release inode
if(functionNum==5) then
    alias inodeindex R2;
    if([TABLE+4*inodeindex]!=[SYSTEM_STATUS_TABLE+1]) then
        R0=-1;
        return;
    endif;

    [FILE_STATUS_TABLE+4*inodeindex]=-1;
    alias i R4;
    i=0;
    while(i<16) do
        if([PROCESS_TABLE+16*i+4]==WAIT_FILE && [PROCESS_TABLE+16*i+5]==inodeindex) then
            [PROCESS_TABLE+16*i+4]=READY;
            [PROCESS_TABLE+16*i+5]=-1;
        endif;
        i=i+1;
    endwhile;
    R0=0;
    return;
endif;






//ACQUIRE SEMAPHORE
if(functionNum==6) then 
        alias i R3;
        i=0;
        while(i<32) do
            if([SEMAPHORE_TABLE+i*4+1]==0) then
                [SEMAPHORE_TABLE+i*4]=-1;
                [SEMAPHORE_TABLE+i*4+1]=1;
                R0=i;
                return;
            endif;
            i=i+1;
        endwhile;
        R0=-1;
        return;
endif;


//release SEMAPHORE
if(functionNum==7) then
    alias currentPID R3;
    alias semdescr R2;
    if([SEMAPHORE_TABLE+semdescr*4]==currentPID) then
        [SEMAPHORE_TABLE+semdescr*4]=-1;
        alias j R5;
        j=0;
        while(j<16) do
            if([PROCESS_TABLE+j*16+4]==WAIT_SEMAPHORE && [PROCESS_TABLE+j*16+5]==j) then
                [PROCESS_TABLE+j*16+4]=READY;
                [PROCESS_TABLE+j*16+5]=-1;
            endif;
            j=j+1;
        endwhile;
        [SEMAPHORE_TABLE+semdescr*4+1]=[SEMAPHORE_TABLE+semdescr*4+1]-1;
    endif;
            
    return;
endif;

//acquire terminal
if(functionNum==8) then
    while([TERMINAL_STATUS_TABLE] ==1) do
        [PROCESS_TABLE +[SYSTEM_STATUS_TABLE+1] *16 +4]=WAIT_TERMINAL;
        multipush(R1,R2);
        
        call MOD_5;

        multipop(R1,R2);
    endwhile;

    [TERMINAL_STATUS_TABLE]=1;
    [TERMINAL_STATUS_TABLE +1]=[SYSTEM_STATUS_TABLE+1];

    return;

endif;

//release terminal
if(functionNum==9) then 
    //if(currentPID==[TERMINAL_STATUS_TABLE+1]) then
        [TERMINAL_STATUS_TABLE]=0;
        alias i R3;
        i=0;
        while (i < 16) do
            if ([PROCESS_TABLE + i * 16 + 4] == WAIT_TERMINAL) then
                [PROCESS_TABLE + 16 * i + 4] = READY;
            endif;
            i = i + 1;
        endwhile;

        alias returnValue R0;
        returnValue=0;
        return;
    // else
    //     alias returnValue R0;
    //     returnValue =-1;
    //     return;
    // endif;

endif; 

//aquire disk
if(functionNum==3) then
    while([DISK_STATUS_TABLE]==1) do
        [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4]=WAIT_DISK;
        multipush(R1,R2);

        call MOD_5;

        multipop(R1,R2);
    endwhile;

    [DISK_STATUS_TABLE]=1;
    [DISK_STATUS_TABLE+4]=[SYSTEM_STATUS_TABLE+1];

    return;
endif;

