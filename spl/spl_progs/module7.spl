
//library
loadi(63,13);
loadi(64,14);

//timer
loadi(4, 17);
loadi(5, 18);

//init
loadi(65,7);
loadi(66,8);

//int 10
loadi(22,35);
loadi(23,36);

//consoleinterupt
loadi(8,21);
loadi(9,22);

//int6
loadi(14,27);
loadi(15,28);


//module5
loadi(50,63);
loadi(51,64);

//exception
loadi(2, 15);
loadi(3, 16);

//int7
loadi(16,29);
loadi(17,30);

//module0
loadi(40,53);
loadi(41,54);

//module4
loadi(48,61);
loadi(49,62);

//int9
loadi(20,33);
loadi(21,34);

//module1
loadi(42,55);
loadi(43,56);

//module2
loadi(44,57);
loadi(45,58);

// inode user table
loadi(59, 3);
loadi(60, 4);

//disk interupt
loadi(6,19);
loadi(7,20);

//disk free list 
loadi(61,2);

//INT8
loadi(18,31);
loadi(19,32);

//int11
loadi(24,37);
loadi(25,38);

//int15
loadi(32,45);
loadi(33,46);

//int13
loadi(28,41);
loadi(29,42);

//int14
loadi(30,43);
loadi(31,44);

//initialize disk status table
[DISK_STATUS_TABLE]=0;





alias i R0;
i = 0;
while (i < 128) do
    if (i <83 ) then
        [MEMORY_FREE_LIST  + i] = 1;
    else
        [MEMORY_FREE_LIST + i] = 0;
    endif;
    i = i + 1;
endwhile;

// per-process resource table for init
i = 1;
while (i < 9) do
    [([PROCESS_TABLE + 16 + 11] + 1) * 512 - 2 * i] = -1;
    i = i + 1;
endwhile;

[SYSTEM_STATUS_TABLE + 0] = 1;
[SYSTEM_STATUS_TABLE + 2] = 45;
[SYSTEM_STATUS_TABLE + 3] = 0;

//init_page_Table

//changing_the_PTBR_value_for_init_PTLR_remains_the_same
PTBR = PAGE_TABLE_BASE+20;
PTLR=10;

//initialize terminal status table
[TERMINAL_STATUS_TABLE]=0;


//INITIALIZE DISK MAP ENTRIES
// disk map table initialization for init

[DISK_MAP_TABLE + 10 + 2] = -1;
[DISK_MAP_TABLE + 10 + 3] = -1;
[DISK_MAP_TABLE + 10 + 4] = 7;
[DISK_MAP_TABLE + 10 + 5] = 8;
[DISK_MAP_TABLE + 10 + 6] = -1;
[DISK_MAP_TABLE + 10 + 7] = -1;
[DISK_MAP_TABLE + 10 + 8] = -1;
[DISK_MAP_TABLE + 10 + 9] = -1;



//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

//pid_for_init
[PROCESS_TABLE + 16 + 1] = 1;

//init_process_gets_Scheduled_first
[PROCESS_TABLE + 16 + 4]=CREATED;

//user_area_page
[PROCESS_TABLE + 16 + 11] = 80;

//KPTR_for_init
[PROCESS_TABLE + 16  + 12] = 0;

//UPTR_for_init
[PROCESS_TABLE + 16  + 13] = 8*512;

//PTBR_for_init
[PROCESS_TABLE + 16 + 14] = PTBR;

//PTLR_for_init
[PROCESS_TABLE + 16 + 15] = PTLR;

[76*512] = [65 * 512 + 1];



i = 2;
while (i < 16) do
    [PROCESS_TABLE + i * 16 + 4] = TERMINATED;
    i = i + 1;
endwhile;

return;

//semaphore table initialization
// initialization of semaphore table
i = 0;
while (i < MAX_SEM_COUNT) do
    [SEMAPHORE_TABLE + i * 4] = -1;
    [SEMAPHORE_TABLE + i * 4 + 1] = 0;
    i = i + 1;
endwhile;