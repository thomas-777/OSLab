//file manager 
alias functNum R1;


//bufferreadd or buffered write
if(functNum==2 || functNum==1) then
    alias blockNum R2;
    alias offset R3;
    alias wordaddress R4;
    alias bufferindex R5;
    bufferindex=blockNum%MAX_BUFFER;
    multipush(R1,R2,R3,R4,R5);
    R1=1;
    R2=bufferindex;
    R3=[SYSTEM_STATUS_TABLE+1];
    call MOD_0;
    multipop(R1,R2,R3,R4,R5);

    if([BUFFER_TABLE + bufferindex*4]!=blockNum) then
        if([BUFFER_TABLE+bufferindex*4+1]==1) then
            multipush(R1,R2,R3,R4,R5);
            R1=1;
            R2=[SYSTEM_STATUS_TABLE+1];
            R3=71+bufferindex;
            R4=[BUFFER_TABLE+bufferindex*4];
            call MOD_4;
            multipop(R1,R2,R3,R4,R5);

            [BUFFER_TABLE+bufferindex*4+1]=0;
        endif;
        multipush(R0, R1, R2, R3, R4, R5);
        R1 = 2;
        R4 = blockNum;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        R3 = 71 + bufferindex;
        call MOD_4;
        multipop(R0, R1, R2, R3, R4, R5);

        [BUFFER_TABLE + bufferindex * 4 + 0] = blockNum;

    endif;
    if(functNum==2) then
        [wordaddress]=[(71+bufferindex)*512+offset];
    else
        [(71+bufferindex)*512+offset]=wordaddress;
        [BUFFER_TABLE + bufferindex * 4 + 1] = 1;
    endif;
    multipush(R0, R1, R2, R3, R4, R5);
    R1 = 2;
    R2 = bufferindex;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_0; 
    multipop(R0, R1, R2, R3, R4, R5);
    
    return;
endif;


//open function calll
if(functNum==3) then
    alias filename R2;  
    alias check R3;
    alias i R4;
    alias inode_index R5;
    i=0;
    check=0;
    while(i<MAX_FILE_NUM) do
        if([ INODE_TABLE + 16*i + 1 ] == filename ) then
            check=1;
            inode_index=i;
            break;
        endif;
        i=i+1;
    endwhile;
    if(check==0) then
        R0=-1;
        return;
    endif;
    //aquire inode
    multipush(R1,R2,R3,R4,R5);
    R1=4;
    R3=[SYSTEM_STATUS_TABLE+1];
    R2=inode_index;
    call MOD_0;
    multipop(R1,R2,R3,R4,R5);
    if(R0==-1) then
        return;
    endif;
    i=0;
    while([OPEN_FILE_TABLE+4*i]!=-1 && i<32) do
        i=i+1;
    endwhile;

    if(i==32) then
        multipush(R1,R2,R3,R4,R5);
        R1=5;
        R3=[SYSTEM_STATUS_TABLE+1];
        R2=inode_index;
        call MOD_0;
        multipop(R1,R2,R3,R4,R5);
        R0=-2;
        return;
    endif;
    
    if(filename=="root") then   
        [OPEN_FILE_TABLE+4*i]=INODE_ROOT;
    else
        if([FILE_STATUS_TABLE+inode_index*4+1]==-1) then
            [FILE_STATUS_TABLE+inode_index*4+1]=1;
        else    
            [FILE_STATUS_TABLE+inode_index*4+1]=[FILE_STATUS_TABLE+inode_index*4+1]+1;
        endif;
        [OPEN_FILE_TABLE+4*i]=inode_index;
    endif;

    [OPEN_FILE_TABLE+4*i+1]=1;
    [OPEN_FILE_TABLE+4*i+2]=0;

    //release INODE
    multipush(R1,R2,R3,R4,R5);
    R1=5;
    R3=[SYSTEM_STATUS_TABLE+1];
    R2=inode_index;
    call MOD_0;
    multipop(R1,R2,R3,R4,R5);
    
    R0=i;
    return;
endif;


//close functioncall
if(functNum==4) then
    alias openfiletableentry R2;
    alias inode_index R3;
    R3=[OPEN_FILE_TABLE+4*openfiletableentry];

    [OPEN_FILE_TABLE+4*openfiletableentry+1]=[OPEN_FILE_TABLE+4*openfiletableentry+1]-1;
    if([OPEN_FILE_TABLE+4*openfiletableentry+1]==0) then
        [OPEN_FILE_TABLE+4*openfiletableentry]=-1;
        [OPEN_FILE_TABLE+4*openfiletableentry+1]=-1;
        [OPEN_FILE_TABLE+4*openfiletableentry+2]=-1;
        if(R3!=INODE_ROOT) then
            [FILE_STATUS_TABLE+inode_index*4+1]=[FILE_STATUS_TABLE+inode_index*4+1]-1;
            if([FILE_STATUS_TABLE+inode_index*4+1]==0) then
                [FILE_STATUS_TABLE+inode_index*4+1]=-1;
            endif;
        endif;
    endif;
    R0=0;
    return;
endif;

