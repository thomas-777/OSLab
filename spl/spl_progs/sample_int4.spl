//create and delete 
[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+13]=SP;

alias userSP R0;
userSP=SP;

SP=[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+11]*512-1;

alias systemcallno R1;
systemcallno=[[PTBR+2*((userSP-5)/512)]*512 + (userSP-5)%512];
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=systemcallno;
alias filename R2;
alias permission R3;

filename=[[PTBR+2*((userSP-4)/512)]*512 + (userSP-4)%512];
permission=[[PTBR+2*((userSP-3)/512)]*512 + (userSP-3)%512];
alias filefound R10;
filefound=0;
alias i R4;
i=0;

//FIND THE INODE INDEX
while([INODE_TABLE+16*i+1]!=-1 && [INODE_TABLE+16*i+1]!=filename) do
    i=i+1;
    if(i>=MAX_FILE_NUM) then 
        [[PTBR+2*((userSP-1)/512)]*512 + (userSP-1)%512]=-1;
        [PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+9]=0;
        SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
        ireturn;
    endif;
endwhile;
if([INODE_TABLE+16*i+1]==filename) then
    filefound=1;
endif;

//CREATE
if(systemcallno==1) then
    if(filefound==1) then
        [[PTBR+2*((userSP-1)/512)]*512 + (userSP-1)%512]=0;
        [PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+9]=0;
        SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
        ireturn;
    endif;
    [INODE_TABLE+16*i+1]=filename;
    [INODE_TABLE+16*i]=DATA;
    [INODE_TABLE+16*i+2]=0;
    [INODE_TABLE+16*i+3]=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+3];
    [INODE_TABLE+16*i+4]=permission;

    [ROOT_FILE+8*i]=filename;
    [ROOT_FILE+8*i+2]=DATA;
    [ROOT_FILE+8*i+1]=0;
    [ROOT_FILE+8*i+3]=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+3];
    [ROOT_FILE+8*i+4]=permission;
    [[PTBR+2*((userSP-1)/512)]*512 + (userSP-1)%512]=0;
endif;

//DELETE
if(systemcallno==4) then
    if(filefound!=1) then
        [[PTBR+2*((userSP-1)/512)]*512 + (userSP-1)%512]=-1;
        [PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+9]=0;
        SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
        ireturn;
    endif;
    backup;
    R1=4;
    R2=i;
    R3=[SYSTEM_STATUS_TABLE+1];
    call MOD_0;
    restore;

     if ([FILE_STATUS_TABLE + i * 4 + 1] != -1) then // file is open
        backup;
        R1 = 5;
        R2 = i;
        R3 = [SYSTEM_STATUS_TABLE + 1];
        call MOD_0;
        restore;
        [[PTBR+2*((userSP-1)/512)]*512 + (userSP-1)%512]=-2;
        [PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+9]=0;
        SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
        ireturn;
    endif;

    //IF THE FILE IS IN BUFFER AND THE DIRTY BIT IS SET WE NEED TO DELETE IT
    //ELSE IT GETS WRITED BACK

    alias blockNum R5;
    blockNum=INODE_TABLE+16*i+8;
    alias limit R6;
    limit = blockNum + 4;
    while (blockNum < limit) do
        if ([blockNum] == -1) then
            break;
        endif;
        alias bufferIndex R7;
        bufferIndex = [blockNum] % MAX_BUFFER;
        if ([BUFFER_TABLE + bufferIndex * 4 + 0] == [blockNum] && [BUFFER_TABLE + bufferIndex * 4 + 1] == 1) then
            [BUFFER_TABLE + bufferIndex * 4 + 1] = 0;
        endif;

        //CALL RELESE BLOCK
        backup;
        R1 = 4;
        R2 = [blockNum];
        R3 = [SYSTEM_STATUS_TABLE + 1];
        call MOD_2;
        restore;
        blockNum = blockNum + 1;
    endwhile;
    alias j R7;
    j=0;
    while(j<16) do
        [INODE_TABLE+16*i+j]=-1;
        j=j+1;
    endwhile;

    j=0;
    while(j<8) do
        [ROOT_FILE+i*8+j]=-1;
        j=j+1;
    endwhile;

    //RELEASE INODE 
    backup;
    R1=5;
    R3=[SYSTEM_STATUS_TABLE+1];
    R2=i;
    call MOD_0;
    restore;
endif;



[[PTBR+2*((userSP-1)/512)]*512 + (userSP-1)%512]=0;
[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+9]=0;
SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];

ireturn;
    

