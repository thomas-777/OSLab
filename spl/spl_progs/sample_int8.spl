//fork 
breakpoint;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;

SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;


//Set mode flag to system no
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=8;

R1=1;
call MOD_1;

alias newPid R2;
newPid=R0;

//IF pid not available
if(newPid==-1) then
    alias userSP R3;
    userSP=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
    [[PTBR + 2 * ((userSP - 1)/512)] * 512 + (userSP - 1) % 512] = -1;
    SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];
    ireturn;
endif;
alias currentPID R3;
currentPID=[SYSTEM_STATUS_TABLE+1];

//If heap is not yet allocated
if([PTBR+4]==-1) then
    multipush(R2,R3);
    R1=1;
    call MOD_2;
    
    [PTBR+4]=R0;
    [PTBR+5]="0110";
    multipop(R2,R3);
    

    multipush(R2,R3);
    R1=1;
    call MOD_2;
    
    [PTBR+6]=R0;
    [PTBR+7]="0110";
     multipop(R2,R3);
   
endif;

//stack for child process
multipush(R2,R3);
R1=1;
call MOD_2;
multipop(R2,R3);
[PAGE_TABLE_BASE + newPid*20 + 16]=R0;
[PAGE_TABLE_BASE + newPid*20 + 17]="0110";

multipush(R2,R3);
R1=1;
call MOD_2;
multipop(R2,R3);
[PAGE_TABLE_BASE + newPid*20 + 18]=R0;
[PAGE_TABLE_BASE + newPid*20 + 19]="0110";


//user area page for child
multipush(R2,R3);
R1=1;
call MOD_2;
multipop(R2,R3);
[PROCESS_TABLE + newPid*16 + 11]=R0;


alias parentprotable R9;
alias childprotable R10;
childprotable=PROCESS_TABLE + newPid*16 ;
parentprotable=PROCESS_TABLE + currentPID*16;
[childprotable + 3]=[parentprotable + 3];
[childprotable + 6]=[parentprotable + 6];
[childprotable + 10]=[parentprotable + 10];
[childprotable + 7]=[parentprotable + 7];
[childprotable + 13]=[parentprotable + 13];


//setup process table for child
[childprotable + 9]=0;
//TICK
[childprotable + 0]=0;
//KPTR
[childprotable + 12]=0;
//PPID
[childprotable + 2]=currentPID;
[childprotable + 4] = CREATED;

// initialization per process resourse table child
alias i R4;
i = RESOURCE_TABLE_OFFSET;
while (i < 512) do
    [[childprotable + 11] * 512 + i] = [[parentprotable + 11] * 512 + i];
    if([[childprotable + 11] * 512 + i]==SEMAPHORE)  then
        [SEMAPHORE_TABLE+[[childprotable+11]*512+i+1]*4+1]=[SEMAPHORE_TABLE+[[childprotable+11]*512+i+1] *4+1]+1;
    endif;
    i = i + 2;
endwhile;

// initialization per process DISK MAP table child
i = 2;
while (i < 10) do
    [DISK_MAP_TABLE+10*newPid+i] = [DISK_MAP_TABLE+10*currentPID+i];
    i = i + 1;
endwhile;

//initialize page table
i=0;
while(i<16) do
    [PAGE_TABLE_BASE + newPid*20 + i] = [PAGE_TABLE_BASE + currentPID*20 + i];
    [PAGE_TABLE_BASE + newPid*20 + i+1] = [PAGE_TABLE_BASE + currentPID*20 + i+1];
    if([PAGE_TABLE_BASE + newPid*20 + i]!=-1) then
        [MEMORY_FREE_LIST + [PAGE_TABLE_BASE + newPid*20 + i]] = [MEMORY_FREE_LIST + [PAGE_TABLE_BASE + newPid*20 + i]]+1;
    endif;
    i=i+2;

endwhile;
//copy stac contenrts
alias oldStack R5;
alias newStack R6;

oldStack = [PAGE_TABLE_BASE+20*currentPID + 16];
newStack = [PAGE_TABLE_BASE+20*newPid + 16];
i = 0;
while (i < 512) do
    [newStack * 512 + i] = [oldStack * 512 + i];
    i = i + 1;
endwhile;

oldStack = [PAGE_TABLE_BASE+20*currentPID + 18];
newStack = [PAGE_TABLE_BASE+20*newPid + 18];
i = 0;
while (i < 512) do
    [newStack * 512 + i] = [oldStack * 512 + i];
    i = i + 1;
endwhile;

//push bp to the child kernel stack
[[PROCESS_TABLE + newPid * 16 + 11] * 512] = BP;
[parentprotable + 9] = 0;
//Return values 
alias userSP R7;
userSP=[parentprotable + 13];
[[PAGE_TABLE_BASE+20*currentPID + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512] = newPid;
[[PAGE_TABLE_BASE+20*newPid + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512] = 0;

SP=[parentprotable + 13];
breakpoint;
ireturn;

