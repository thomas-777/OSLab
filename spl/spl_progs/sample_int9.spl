[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+13]=SP;

alias userSP R0;
userSP=SP;
SP=[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+11]*512-1;

[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+9]=9;

alias FileName R1;
alias physicalpagenum R2;

physicalpagenum=[PTBR+2*((userSP-4)/512)];
FileName=[physicalpagenum*512 +((userSP-4)%512)];

alias InodeEntry R3;
alias flag R4;

InodeEntry=0;
flag=0;

while(InodeEntry<MAX_FILE_NUM) do
    if(FileName==[INODE_TABLE + InodeEntry*16+1]) then
        if([INODE_TABLE+InodeEntry*16]==EXEC) then  
            flag =1;
            break;
        endif;
    endif;
    InodeEntry=InodeEntry+1;
endwhile;

if(flag==0) then    
    physicalpagenum=[PTBR+2*((userSP-1)/512)];
    alias returnAddress R5;
    returnAddress=[physicalpagenum*512 +((userSP-1)%512)];
    [returnAddress]=-1;
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
    SP = userSP;
    ireturn;
endif;


multipush(R0,R1,R2,R3,R4);

//calling exit function
R1=3;
R2=[SYSTEM_STATUS_TABLE+1];

call MOD_1;

multipop(R0,R1,R2,R3,R4);

alias user_area_page R5;

R5=[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+11];

[MEMORY_FREE_LIST+user_area_page]=[MEMORY_FREE_LIST+user_area_page]+1;

[SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]-1;

SP=user_area_page*512;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 4] = RUNNING;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 7] = InodeEntry;

//ALLOCATE

//Library
[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";


multipush(R0, R1, R2, R3, R4, R5);

//Heap

R1=1;
call MOD_2;
[PTBR + 4]=R0;
[PTBR+5]="0110";

R1=1;
call MOD_2;
[PTBR + 6]=R0;
[PTBR+7]="0110";

//Stack
R1=1;
call MOD_2;
[PTBR + 16]=R0;
[PTBR+17]="0110";

R1=1;
call MOD_2;
[PTBR + 18]=R0;
[PTBR+19]="0110";

multipop(R0, R1, R2, R3, R4, R5);


multipush(R0, R1, R2, R3, R4, R5);



multipop(R0, R1, R2, R3, R4, R5);

alias i R7;
alias j R6;
i=8;
j=0;
while (i <= 11) do
    multipush(R0, R1, R2, R3, R4, R5);
    if ([InodeEntry + i] != -1) then
        R1 = 1;
        call MOD_2;
        [PTBR + 8 +  (2 * j)] = R0;
        [PTBR + 8 + (2 * j) + 1] = "0100";
        loadi([PTBR + 8 + 2 * j], [INODE_TABLE + InodeEntry * 16 + 8 + j]);
    else
        [PTBR + 8 + 2 * j] = -1;
        [PTBR + 9 + 2 * j] = "0000";
    endif;

    multipop(R0, R1, R2, R3, R4, R5);

    i = i + 1;
    j=j+1;

endwhile;


[PTBR+16]=[[PTBR+8]*512+1];

SP=userSP;
[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+9]=0;
ireturn;








