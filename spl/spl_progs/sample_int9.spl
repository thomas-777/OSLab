[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

backup;

alias userSP R0; 
userSP=[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13]; //Saving value of user stack


//exec call number
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 9; 


//file name should be at sp-4 (1st argument)
alias physicalPageNum R1;
alias offset R2;
alias fileNamePhyAddr R3;
physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];
offset = (userSP - 4) % 512;
fileNamePhyAddr = (physicalPageNum * 512) + offset;
alias fileName R4;
fileName=[fileNamePhyAddr];



//Checking in the inode copy if the file is there
alias check R5;
alias i R6;
alias inode_index R7;

i=0;
check=0;
while(i<MAX_FILE_NUM) do

	if([ INODE_TABLE + 16*i + 1 ] == fileName ) then
		check=1;
		inode_index=i;
		break;
	endif;
	i=i+1;
endwhile;


//if we could not find the required file in the inode copy
if(check==0) then

	//return value is -1
	alias physicalAddrRetVal R8;
	physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = -1;

	//reset mode flag
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
	
	//changing back to user stack
	SP = userSP;

	ireturn;

endif;


//if check was not 0 then we have the inode index ready so now are going to call mod 1 (process manager)
//with appropriate arguments ready in registers for calling the exit process function in MOD_1

//saving the register context (could use multipush too)
backup;

R1=3;
R2=[SYSTEM_STATUS_TABLE + 1];

call MOD_1;

restore;

//after the exit process, the user area page has been deallocated so we have to reclaim it
alias userAreaPageNo R8;
userAreaPageNo=[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+11];

//Reclaiming the same page by incrementing the memory free list entry of user area page

//incrementing the MEMORY_FREE_LIST. this refers to how many processes are using that page
[MEMORY_FREE_LIST+userAreaPageNo]=[MEMORY_FREE_LIST+userAreaPageNo]+1;

//decrementing the MEM_FREE_COUNT in the system status table. This refers to the number of pages which are free
[SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]-1;

//Set the SP to the start of the user area page to intialize the kernel stack of the new process
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

//this was made to terminated before by the exit process
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 4]=RUNNING;

//inode index update 
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 7]=inode_index;



//per process table (with -1 in this stage)
i = 496;		
while(i < 512) do
	[userAreaPageNo *512 + i] = -1;
i = i + 2;
endwhile;



//setting up the page table of the new process

//PTBR=PAGE_TABLE_BASE+[SYSTEM_STATUS_TABLE+1]*20;

//Library
[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";

//heap
backup;
R1=1;
call MOD_2;
[PTBR+4]=R0;
[PTBR+5]="0110";
restore;

backup;
R1=1;
call MOD_2;
[PTBR+6]=R0;
[PTBR+7]="0110";
restore;

//code
backup;
alias j R4;
alias k R5;
j=8;
k=8;

while([INODE_TABLE+ 16*inode_index + j] != -1) do

    if(j>11) then
        break;
    endif;

    backup;
	R1=1;
	call MOD_2;
	[PTBR+k]=R0;
	[PTBR+k+1]="0100";
	restore;

	//loadi([PTBR+k], [INODE_TABLE+ 16*inode_index + j]);

    //replacing loadi with the async function load by using DISK_LOAD from device manager
    backup;
    R1= 2;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = [PTBR + k];
    R4 = [INODE_TABLE + 16*inode_index + j];
    call MOD_4;
    restore;

    j=j+1;
    k=k+2;

endwhile;


//stack
backup;
R1=1;
call MOD_2;
[PTBR+16]=R0;
[PTBR+17]="0110";
restore;

backup;
R1=1;
call MOD_2;
[PTBR+18]=R0;
[PTBR+19]="0110";
restore;

//setting entry point - stack 
[[PTBR+16]*512] = [[PTBR+8]*512+1];

//reset mode flag
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

restore;

//changing back to user stack
SP=8*512;

ireturn;